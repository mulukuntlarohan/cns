import java.util.*;
import java.security.spec.KeySpec;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import java.util.Base64;
public class DES {
    private static final String form = "UTF8";
    public static final String des = "DESede";
    private SecretKey key;
    private Cipher c;
    public DES(String ekey) throws Exception {
        KeySpec ks = new DESedeKeySpec(ekey.getBytes(form));
        SecretKeyFactory skf = SecretKeyFactory.getInstance(des);
        c = Cipher.getInstance(des);
        key = skf.generateSecret(ks);
    }
    public String encrypt(String text) {
        try {
            c.init(Cipher.ENCRYPT_MODE, key);
            byte[] plainText = text.getBytes(form);
            byte[] encryptedText = c.doFinal(plainText);
            return Base64.getEncoder().encodeToString(encryptedText);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
    public String decrypt(String encryptedString) {
        try {
            c.init(Cipher.DECRYPT_MODE, key);
            byte[] encryptedText = Base64.getDecoder().decode(encryptedString);
            byte[] plainText = c.doFinal(encryptedText);
            return new String(plainText, form);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
    public static void main(String[] args) throws Exception {
        Scanner sc=new Scanner(System.in);
        System.out.print("Enter the string: ");
        String stringToEncrypt = sc.next();
        String encryptionKey = "ThisIsSecretEncryptionKey";
        DES myEncryptor = new DES(encryptionKey);
        String encrypted = myEncryptor.encrypt(stringToEncrypt);
        String decrypted = myEncryptor.decrypt(encrypted);
        System.out.println("Encrypted Value : " + encrypted);
        System.out.println("Decrypted Value : " + decrypted);
        System.out.println("");
    }
}
